# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
#шаблоны для печати сети и маски
template_network = "{0:<10}{1:<10}{2:<10}{3:<10}\n{0:08b}  {1:08b}  {2:08b}  {3:08b}"
template_mask = "{0:<10}{1:<10}{2:<10}{3:<10}\n{0:08b}  {1:08b}  {2:08b}  {3:08b}"

#получение адреса от пользователя и заведение адреса и маски в переменные
ip_address = input("Введите IP-адрес с маской в формате 10.1.1.250/24: ")
ip, mask = ip_address.split('/')

#разбиение адреса на октеты и занесение октетов в список строк + получение октетов как числовых переменных    
ip_list = ip.split('.')
oct_1, oct_2, oct_3, oct_4 = [int(ip_list[0]), int(ip_list[1]), int(ip_list[2]), int(ip_list[3])]

#преобразование маски в числовую переменную и получение непрерывной двоичной строки маски 
mask = int(mask)
bin_mask = "1" * mask + "0" * (32 - mask)

#разбиение маски на октеты и занесение октетов в числовые переменные 
mask_oct_1, mask_oct_2, mask_oct_3, mask_oct_4 = [int(bin_mask[0:8], 2), int(bin_mask[8:16], 2), int(bin_mask[16:24], 2), int(bin_mask[24:], 2)]

#получение числовых переменных адреса сети путем пересечения адреса и маски

net_1, net_2, net_3, net_4 = [oct_1 & mask_oct_1, oct_2 & mask_oct_2, oct_3 & mask_oct_3, oct_4 & mask_oct_4]

#Вывод всей информации на экран с использованием шаблонов
print("\nNetwork: \n" + template_network.format(
    net_1, net_2, net_3, net_4
))

print("\nMask: \n/" + str(mask) + "\n" + template_mask.format(
    mask_oct_1, mask_oct_2, mask_oct_3, mask_oct_4
))